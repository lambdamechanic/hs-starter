name: CI

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GHC_VERSION: "9.10.3"
      CABAL_VERSION: "3.12.1.0"

    steps:
      - uses: actions/checkout@v4

      - name: Detect Haskell package metadata
        run: |
          set -euo pipefail
          if [ -f package.yaml ]; then
            PACKAGE_NAME=$(yq -r '.name' package.yaml)
            TEST_SUITE_NAME=$(yq -r '(.tests | keys | .[0]) // ""' package.yaml)
            if [ -z "$TEST_SUITE_NAME" ] || [ "$TEST_SUITE_NAME" = "null" ]; then
              TEST_SUITE_NAME="${PACKAGE_NAME}-tests"
            fi
            CABAL_FILE="${PACKAGE_NAME}.cabal"
          else
            CABAL_FILE=$(ls *.cabal | head -n 1)
            PACKAGE_NAME=${CABAL_FILE%.cabal}
            TEST_SUITE_NAME=$(awk '/^test-suite / {print $2; exit}' "$CABAL_FILE")
            if [ -z "$TEST_SUITE_NAME" ]; then
              TEST_SUITE_NAME="${PACKAGE_NAME}-tests"
            fi
          fi
          PATHS_MODULE="Paths_${PACKAGE_NAME//-/_}"
          {
            echo "CABAL_FILE=$CABAL_FILE"
            echo "PACKAGE_NAME=$PACKAGE_NAME"
            echo "TEST_SUITE_NAME=$TEST_SUITE_NAME"
            echo "PATHS_MODULE=$PATHS_MODULE"
          } >> "$GITHUB_ENV"

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql libpq-dev ripgrep

      - name: Install pgroll CLI
        run: |
          set -euo pipefail
          PGROLL_VER="v0.14.2"
          URL="https://github.com/xataio/pgroll/releases/download/${PGROLL_VER}/pgroll.linux.amd64"
          sudo curl -fsSL -o /usr/local/bin/pgroll "$URL"
          sudo chmod +x /usr/local/bin/pgroll
          pgroll --version

      - name: Restore ghcup
        uses: actions/cache@v4
        with:
          path: ~/.ghcup
          key: ghcup-${{ runner.os }}-${{ env.GHC_VERSION }}
          restore-keys: |
            ghcup-${{ runner.os }}-

      - id: setup
        name: Setup GHC and Cabal
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          cabal-version: ${{ env.CABAL_VERSION }}

      - name: Cache cabal store
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: cabal-${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-${{ hashFiles('cabal.project', '*.cabal') }}
          restore-keys: |
            cabal-${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-
            cabal-${{ runner.os }}-

      - name: Cache dist-newstyle
        uses: actions/cache@v4
        with:
          path: dist-newstyle
          key: "dist-${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-${{ hashFiles('cabal.project', 'package.yaml', '*.cabal', 'app/**/*.hs', 'src/**/*.hs', 'test/**/*.hs') }}"
          restore-keys: |
            dist-${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-
            dist-${{ runner.os }}-

      - name: Install tooling
        run: |
          sudo apt-get install --yes python3-yaml
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user PyYAML
          cabal update
          cabal install hpack --installdir "$HOME/.local/bin" --overwrite-policy=always
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Generate cabal plan
        run: cabal build all --enable-tests --enable-benchmarks --dry-run

      - name: Test with coverage
        timeout-minutes: 20
        run: |
          export PATH="$(pg_config --bindir):$PATH"
          # Ensure .tix files land in a predictable location
          export HPCTIXDIR="$(pwd)/dist-newstyle"
          export PGCONNECT_TIMEOUT=5
          which cabal
          cabal --version
          ghc --version
          PACKAGE_NAME=${PACKAGE_NAME}
          UNIT_LIB_ID=$(jq -r --arg pkg "$PACKAGE_NAME" '."install-plan"[] | select(."pkg-name" == $pkg and ."component-name" == "lib") | ."id"' dist-newstyle/cache/plan.json)
          UNIT_TEST_ID=$(jq -r --arg pkg "$PACKAGE_NAME" '."install-plan"[] | select(."pkg-name" == $pkg and (."component-name" | startswith("test:"))) | ."id"' dist-newstyle/cache/plan.json)
          if cabal test --help | grep -q -- "--coverage-for"; then
            echo "Using cabal --coverage-for=${UNIT_LIB_ID} and test=${UNIT_TEST_ID}"
            cabal test --enable-coverage --enable-per-component \
              --coverage-for="${UNIT_LIB_ID}" \
              --coverage-for="${UNIT_TEST_ID}" \
              --test-show-details=streaming
          else
            echo "cabal does not support --coverage-for; using legacy coverage flags"
            cabal test --enable-coverage --enable-per-component --test-show-details=streaming
          fi

      - name: Prepare http layer workspace
        run: |
          mkdir -p .ci-cache/http-layer
          echo "WORKDIR=$(pwd)/.ci-cache/http-layer" >> "$GITHUB_ENV"

      - name: Cache http layer dist-newstyle
        uses: actions/cache@v4
        with:
          path: .ci-cache/http-layer/dist-newstyle
          key: http-layer-${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-${{ hashFiles('scripts/add_as_http_layer.sh', 'scripts/test_add_http_layer.sh', 'scripts/templates/cabal.project.local', 'fixtures/sample/**') }}
          restore-keys: |
            http-layer-${{ runner.os }}-${{ steps.setup.outputs.ghc-version }}-
            http-layer-${{ runner.os }}-

      - name: Integration test add_as_http_layer
        run: scripts/test_add_http_layer.sh

      - name: Generate coverage report (Codecov JSON)
        uses: 8c6794b6/hpc-codecov-action@v4
        with:
          target: cabal:${{ env.TEST_SUITE_NAME }}
          excludes: Main,${{ env.PATHS_MODULE }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: codecov.json
